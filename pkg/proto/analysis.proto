syntax = "proto3";
package analysis;
option go_package="pkg/proto";
import "google/api/annotations.proto";

// Order
message Order {
  int32 id = 1;
  float discount = 2;
  float amount = 3;
  string payment_method = 4;
  int32 rating = 5;
  int32 duration = 6;
  string cuisine = 7;
  int32 time = 8;
}

message Item {
  int32 Id = 1;
  float Amount = 2;
  float Discount = 3;
  string Cuisine = 4;
}

message ListItems {
  repeated Item items = 1;
}

// Request parameters
message GetReq {
  int32 id = 1;
}

// Customer
message Customer {
  int32 id = 1;
  string name = 2;
  string state = 3;
}

// Restaurant
message Restaurant {
  int32 id = 1;
  string name = 2;
  string state = 3;
}

// List of Restaurants
message RestaurantList {
  repeated Restaurant restaurants = 1;
}

// Cuisines per state
message StateCuisines {
  // List of cuisines
  message CuisineList {
    repeated string cuisine = 1;
  }
  map<string, CuisineList> states = 1;
}

// Customers per cuisine
message CuisineCustomers {
  // List of customers
  message CustomerList {
    repeated Customer customer = 1;
  }
  map<string, CustomerList> cuisines = 1;
}

message LoginReq {
  LoginCred cred = 1;
}

message LoginCred {
  string user = 1;
  string pass = 2;
}

message LoginRes {
  string token = 1;
}

message OrderReq {
  Order order = 1;
}

message PostRes {
  string response = 1;
}

message CustomerReq {
  Customer customer = 1;
}

message RestReq {
  Restaurant restaurant = 1;
}

message PostItemReq {
  int32 Id = 1;
  Item item = 2;
}

message ItemReq {
  message Limits {
    int32 low = 1;
    int32 high = 2;
  }
  int32 Id = 1;
  int32 itemId = 2;
  Limits limit = 3;
}

service Analysis {

  rpc Login(LoginReq) returns (LoginRes) {
    option (google.api.http) = {
      post: "v1/login",
      body: "cred"
    };
  }
  
  // Gets an order given its ID
  rpc GetOrder(GetReq) returns (Order) {
    option (google.api.http) = {
      get: "/v1/orders/{Id}"
    };
  }

  rpc PostOrder(OrderReq) returns (PostRes) {
    option (google.api.http) = {
      post: "/v1/orders",
      body: "order"
    };
  }

  rpc PutOrder(OrderReq) returns (PostRes) {
    option (google.api.http) = {
      put: "/v1/orders/{order.Id}"
      body: "order"
    };
  }

  rpc GetAllCustomers(GetReq) returns (Customer) {
    option (google.api.http) = {
      get: "/v1/customers"
    };
  }

  rpc GetCustomer(CustomerReq) returns (Customer) {
    option (google.api.http) = {
      get: "/v1/customers/{customer.Id}"
    };
  }

  rpc PutCustomer(CustomerReq) returns (PostRes) {
    option (google.api.http) = {
      put: "/v1/customers/{customer.Id}",
      body: "customer"
    };
  }

  rpc DeleteOrder(OrderReq) returns (PostRes) {
    option (google.api.http) = {
      delete: "/v1/orders/{order.Id}"
    };
  }

  // Get a restaurant given its ID
  rpc GetRestaurant(GetReq) returns (Restaurant) {
    option (google.api.http) = {
      get: "/v1/restaurants/{Id}"
    };
  }

  rpc PostRestaurant(RestReq) returns (PostRes) {
    option (google.api.http) = {
      post: "/v1/restaurants",
      body: "restaurant"
    };
  }

  rpc GetRestaurantAllItems(GetReq) returns (ListItems) {
    option (google.api.http) = {
      get: "/v1/restaurant/{Id}/items"
    };
  }

  rpc GetRestaurantRangeItems(ItemReq) returns (ListItems) {
    option (google.api.http) = {
      get: "/v1/restaurant/{Id}/items?min={limit.low}&max={limit.high}"
    };
  }

  rpc GetRestaurantItem(ItemReq) returns (Item) {
    option (google.api.http) = {
      get: "/v1/restaurant/{Id}/items/{itemId}"
    };
  }

  rpc PostRestaurantItems(PostItemReq) returns (PostRes) {
    option (google.api.http) = {
      post: "/v1/restaurant/{Id}/items",
      body: "item"
    };
  }

  rpc PutRestaurantItems(PostItemReq) returns (PostRes) {
    option (google.api.http) = {
      put: "/v1/restaurant/{Id}/items/{item.Id}",
      body: "item"
      addition_bindings {
        put: "/v1/restaurant/{Id}/items"
        body: "item"
      }
    };
  }

  rpc DeleteRestaurantItems(PostItemReq) returns (PostRes) {
    option (google.api.htpp) = {
      delete: "/v1/restaurant/{Id}/items/{item.Id}"
    };
  }

  // Get the top performing restaurants by order count
  rpc TopRestaurants(GetReq) returns (RestaurantList) {
    option (google.api.http) = {
      get: "/v1/restaurants/top/{Id}"
    };
  }

  // Get the worst performing restaurants by order count
  rpc WorstRestaurants(GetReq) returns (RestaurantList) {
    option (google.api.http) = {
      get: "/v1/restaurants/worst/{Id}"
    };
  }

  // Get the most ordered cuisines for states
  rpc TopStateCuisines(GetReq) returns (StateCuisines) {
    option (google.api.http) = {
      get: "/v1/state-cuisines/top/{Id}"
    };
  }

  // Get the least ordered cuisines for states
  rpc WorstStateCuisines(GetReq) returns (StateCuisines) {
    option (google.api.http) = {
      get: "/v1/state-cuisines/worst/{Id}"
    };
  }

  // Get the customer base for cuisines
  rpc CuisineCustomerMap(Length) returns (CuisineCustomers) {
    option (google.api.http) = {
      get: "/v1/cuisines-demographics"
    };
  }
}