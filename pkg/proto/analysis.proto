syntax = "proto3";
package analysis;
option go_package="pkg/proto";
import "google/api/annotations.proto";

// Order
message Order {
  int32 id = 1;
  float discount = 2;
  float amount = 3;
  string payment_method = 4;
  int32 rating = 5;
  int32 duration = 6;
  string cuisine = 7;
  int32 time = 8;
}

// Item
message Item {
  int32 id = 1;
  float amount = 2;
  float discount = 3;
  string cuisine = 4;
}

// Slice of Items
message ItemList {
  repeated Item items = 1;
}

// Request parameters
message GetReq {
  int32 id = 1;
}

// Customer
message Customer {
  int32 id = 1;
  string name = 2;
  string state = 3;
}

// Restaurant
message Restaurant {
  int32 id = 1;
  string name = 2;
  string state = 3;
}

// List of Restaurants
message RestaurantList {
  repeated Restaurant restaurants = 1;
}

// Cuisines per state
message StateCuisines {
  // List of cuisines
  message CuisineList {
    repeated string cuisine = 1;
  }
  map<string, CuisineList> states = 1;
}

// List of customers
message CustomerList {
  repeated Customer customer = 1;
}

// Customers per cuisine
message CuisineCustomers {
  map<string, CustomerList> cuisines = 1;
}

message LoginReq {
  LoginCred cred = 1;
}

message LoginCred {
  string user = 1;
  string pass = 2;
}

message LoginRes {
  string token = 1;
}

message OrderReq {
  Order order = 1;
}

message PostRes {
  string response = 1;
}

message CustomerReq {
  Customer customer = 1;
}

message RestReq {
  Restaurant restaurant = 1;
}

message PostItemReq {
  int32 id = 1;
  Item item = 2;
}

message ItemReq {
  message Limits {
    int32 low = 1;
    int32 high = 2;
  }
  int32 id = 1;
  int32 item_id = 2;
  Limits limit = 3;
}

service Analysis {

  // Gets user credentials and returns jwt token
  rpc Login(LoginReq) returns (LoginRes) {
    option (google.api.http) = {
      post: "v1/login",
      body: "cred"
    };
  }

  // Gets an order given its ID
  rpc GetOrder(GetReq) returns (Order) {
    option (google.api.http) = {
      get: "/v1/orders/{id}"
    };
  }

  // Gets order(JSON) and adds it to db
  rpc PostOrder(OrderReq) returns (PostRes) {
    option (google.api.http) = {
      post: "/v1/orders",
      body: "order"
    };
  }

  // Gets order(JSON) and updates order in db
  rpc PutOrder(OrderReq) returns (PostRes) {
    option (google.api.http) = {
      put: "/v1/orders/{order.id}"
      body: "order"
    };
  }

  // Returns all Customers
  rpc GetAllCustomers(GetReq) returns (CustomerList) {
    option (google.api.http) = {
      get: "/v1/customers"
    };
  }

  // Returns Customer of specific ID
  rpc GetCustomer(CustomerReq) returns (Customer) {
    option (google.api.http) = {
      get: "/v1/customers/{customer.id}"
    };
  }

  // Updates Customer of given ID in the db
  rpc PutCustomer(CustomerReq) returns (PostRes) {
    option (google.api.http) = {
      put: "/v1/customers/{customer.id}",
      body: "customer"
    };
  }

  // Deletes Order of given Order ID
  rpc DeleteOrder(OrderReq) returns (PostRes) {
    option (google.api.http) = {
      delete: "/v1/orders/{order.id}"
    };
  }

  // Get a restaurant given its ID
  rpc GetRestaurant(GetReq) returns (Restaurant) {
    option (google.api.http) = {
      get: "/v1/restaurants/{id}"
    };
  }

  // Gets a Restaurant and adds it to the db
  rpc PostRestaurant(RestReq) returns (PostRes) {
    option (google.api.http) = {
      post: "/v1/restaurants",
      body: "restaurant"
    };
  }

  // Gets a Restaurant ID and returns all of it's items
  rpc GetRestaurantAllItems(GetReq) returns (ItemList) {
    option (google.api.http) = {
      get: "/v1/restaurant/{id}/items"
    };
  }

  // Gets a min and max amount range and returns the list of items of given Restaurant ID that belong to this range
  rpc GetRestaurantRangeItems(ItemReq) returns (ItemList) {
    option (google.api.http) = {
      get: "/v1/restaurant/{id}/items?min={limit.low}&max={limit.high}"
    };
  }

  // Gets Restaurant ID and Item ID and returns respective item
  rpc GetRestaurantItem(ItemReq) returns (Item) {
    option (google.api.http) = {
      get: "/v1/restaurant/{id}/items/{item_id}"
    };
  }

  // Gets an Item(JSON) and adds it to Restaurant of given ID in the db
  rpc PostRestaurantItems(PostItemReq) returns (PostRes) {
    option (google.api.http) = {
      post: "/v1/restaurant/{id}/items",
      body: "item"
    };
  }

  // Gets an Item(JSON) and updates it to Restaurant of given ID in the db
  rpc PutRestaurantItems(PostItemReq) returns (PostRes) {
    option (google.api.http) = {
      put: "/v1/restaurant/{id}/items/{item_id}",
      body: "item"
      addition_bindings {
        put: "/v1/restaurant/{id}/items"
        body: "item"
      }
    };
  }

  // Deletes Item of given Item ID and Restaurant ID from db
  rpc DeleteRestaurantItems(PostItemReq) returns (PostRes) {
    option (google.api.htpp) = {
      delete: "/v1/restaurant/{Id}/items/{item_id}"
    };
  }

  // Get the top performing restaurants by order count
  rpc TopRestaurants(GetReq) returns (RestaurantList) {
    option (google.api.http) = {
      get: "/v1/restaurants/top/{id}"
    };
  }

  // Get the worst performing restaurants by order count
  rpc WorstRestaurants(GetReq) returns (RestaurantList) {
    option (google.api.http) = {
      get: "/v1/restaurants/worst/{id}"
    };
  }

  // Get the most ordered cuisines for states
  rpc TopStateCuisines(GetReq) returns (StateCuisines) {
    option (google.api.http) = {
      get: "/v1/state-cuisines/top/{id}"
    };
  }

  // Get the least ordered cuisines for states
  rpc WorstStateCuisines(GetReq) returns (StateCuisines) {
    option (google.api.http) = {
      get: "/v1/state-cuisines/worst/{id}"
    };
  }

  // Get the customer base for cuisines
  rpc CuisineCustomerMap(Length) returns (CuisineCustomers) {
    option (google.api.http) = {
      get: "/v1/cuisines-demographics"
    };
  }
}